(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{334:function(t,a,e){t.exports=e.p+"assets/img/image-20200719223009123.4216a1fc.png"},453:function(t,a,e){"use strict";e.r(a);var r=e(10),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"线程的并发工具类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程的并发工具类"}},[t._v("#")]),t._v(" 线程的并发工具类")]),t._v(" "),r("h4",{attrs:{id:"join-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#join-方法"}},[t._v("#")]),t._v(" join()方法")]),t._v(" "),r("p",[t._v("会释放锁")]),t._v(" "),r("h4",{attrs:{id:"yield"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[t._v("#")]),t._v(" yield()")]),t._v(" "),r("p",[t._v("让出cpu但是不释放锁")]),t._v(" "),r("h4",{attrs:{id:"sleep（）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sleep（）"}},[t._v("#")]),t._v(" sleep（）")]),t._v(" "),r("p",[t._v("让出cpu，不释放锁")]),t._v(" "),r("h4",{attrs:{id:"wait（）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#wait（）"}},[t._v("#")]),t._v(" wait（）")]),t._v(" "),r("p",[t._v("调用wait方法之前必须持有锁，调用该方法会释放锁，wait（）方法返回时会重新持有锁")]),t._v(" "),r("h4",{attrs:{id:"notify（）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#notify（）"}},[t._v("#")]),t._v(" notify（）")]),t._v(" "),r("p",[t._v("调用该方法也必须持有锁，写在同步代码块中，写在最后，调用notify（）方法本事不会释放锁")]),t._v(" "),r("h4",{attrs:{id:"并发工具类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#并发工具类"}},[t._v("#")]),t._v(" 并发工具类")]),t._v(" "),r("p",[t._v("Fork/Join")]),t._v(" "),r("p",[t._v("分而治之：将大问题分解为多个互斥的小任务，将子任务执行结果合并\n工作密取")]),t._v(" "),r("p",[t._v("使用")]),t._v(" "),r("p",[r("img",{attrs:{src:e(334),alt:"image-20200719223009123"}})]),t._v(" "),r("p",[t._v("RecursiveTask")]),t._v(" "),r("h4",{attrs:{id:"forkjoin的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#forkjoin的使用"}},[t._v("#")]),t._v(" ForkJoin的使用")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("创建类Demo 并继承RecursiveTask")])]),t._v(" "),r("li",[r("p",[t._v("在compute（）方法中写逻辑\n其中invokeAll（），Demo类相当于是任务。\nList< Demo tasks = new ArrayList< Demo >;\ninvokeAll(tasks);")]),t._v(" "),r("p",[t._v("//将结果合并\nfor(Demo task :invokeAll(tasks){")]),t._v(" "),r("p",[t._v("​\ttask.join();")]),t._v(" "),r("p",[t._v("}")])])]),t._v(" "),r("p",[t._v("3.main方法调用")]),t._v(" "),r("p",[t._v("​\tForkJoinPool pool = new ForkJoinPool();\n​\tDemo task = new Demo;\n​\tpool.execute(task);或者是pool.invoke(task);")]),t._v(" "),r("p",[t._v("需要注意的是异步执行的话，主线程可能很快结束，需要task.join();等待task执行完才让主线程结束")]),t._v(" "),r("p",[t._v("pool.invoke()同步\npool.execute()异步调用")]),t._v(" "),r("h4",{attrs:{id:"工具类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工具类"}},[t._v("#")]),t._v(" 工具类")]),t._v(" "),r("h5",{attrs:{id:"countdownlatch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[t._v("#")]),t._v(" CountDownLatch")]),t._v(" "),r("p",[t._v("​\tCountDownLatch countDownLatch = new CountDownLatch(n);")]),t._v(" "),r("p",[t._v("​\tcountDownLatch.await();")]),t._v(" "),r("p",[t._v("​\tcountDownLatch.countDown();")]),t._v(" "),r("h5",{attrs:{id:"cyclicbarrier"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[t._v("#")]),t._v(" CyclicBarrier")]),t._v(" "),r("p",[t._v("​\t设置数量，线程数量达到阈值，一起执行")]),t._v(" "),r("h5",{attrs:{id:"semaphore"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[t._v("#")]),t._v(" Semaphore")]),t._v(" "),r("h5",{attrs:{id:"exchanger"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#exchanger"}},[t._v("#")]),t._v(" Exchanger")]),t._v(" "),r("p",[t._v("​\t仅限两个线程交换数据")]),t._v(" "),r("h5",{attrs:{id:"callable、future、futuretask"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#callable、future、futuretask"}},[t._v("#")]),t._v(" Callable、Future、FutureTask")])])}),[],!1,null,null,null);a.default=s.exports}}]);